# -*- coding: utf-8 -*-
"""CAT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sRIsDS5j9NldiaHVzmWM__8w0BV2EkkN
"""

# global optimization
from itertools import product
import pandas as pd
import numpy
import numpy as np
from numpy import array
from numpy import argmax
from numpy import tensordot
import os

import tensorflow as tf
print(tf.version.VERSION)

import pandas as pd
import numpy as np

# importing data
train = pd.read_csv("AI-DataTrain.csv")
test = pd.read_csv("AI-DataTest.csv")

train

test

x_train = train.iloc[0:0, 0:50] 
x_train

x_test = test.iloc[0:0, 0:10]
x_test

y_train = train.iloc[:, 100:0]
y_train

y_test = test.iloc[:, 100:0]
y_test

train = np.array(train)
test = np.array(test)

(x_train, y_train) = train.shape
(x_test, y_test) = test.shape

print(train.shape, test.shape)

list1 = []
list2 = []
def prob(data,i,list,row):
    pb = 0
    count = 0
    total = 0
    for j in range(0,row,1):
        if data[j,i]==1:
            count = count + 1
        total = total + 1
    pb = count/total
    list.append(pb)
    
def inter(data,k,list,row):
    for i in range(0,k,1):
        prob(train,i,list,row)
        
inter(train,y_train,list1,x_train)
inter(test,y_test,list2,x_test)

import sys
print(sys.getrecursionlimit())

sys.setrecursionlimit(1500)

# weights
Y_train = []
Y_test = []
def weights(lt,Y,colm):
    for i in range(0,colm,1):
        if lt[i] > 0.700:
            Y.append(2)
        elif lt[i] > 0.300 and lt[i] < 0.699:
            Y.append(1)
        else:
            Y.append(0)
weights(list2,Y_test,y_test)
weights(list1,Y_train,y_train)

X_train = np.array(list1)
X_test = np.array(list2)
Y_train = np.array(Y_train)
Y_test = np.array(Y_test)
X_test.shape

from tensorflow import keras

# callback function
class myCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        if(logs.get('accuracy')>0.95 and logs.get('loss')<0.25):
            print("\nReached 95% accuracy so cancelling training!")
            self.model.stop_training = True

callbacks = myCallback()

# define model
model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(),
  tf.keras.layers.Dense(12, activation=tf.nn.relu),
  tf.keras.layers.Dense(6, activation=tf.nn.relu),
  tf.keras.layers.Dense(3, activation=tf.nn.softmax)
])
model.compile(optimizer=tf.keras.optimizers.Adam(),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# fit model
history = model.fit(X_train,Y_train,epochs=1500,validation_data=(X_test,Y_test),callbacks=[callbacks])

model.summary()

# evaluate the model
_, train_acc = model.evaluate(X_train, Y_train, verbose=0)
_, test_acc = model.evaluate(X_test, Y_test, verbose=0)
print('Train: %.3f, Test: %.3f' % (train_acc, test_acc))

# learning curves of model accuracy
from matplotlib import pyplot
pyplot.plot(history.history['accuracy'], label='train')
pyplot.plot(history.history['val_accuracy'], label='test')
pyplot.legend()
pyplot.show()

# make a prediction
predictions = model.predict(X_test)

# summarize the first 5 cases
for i in range(5):
	print('%s => %s (expected %d)' % (X_train[i].tolist(), predictions[i], Y_test[i]))

!pip install xlsxwriter

!pip install openpyxl

Question_no = []
for i in range(0,y_test,1):
  k = i+1
  que ='Question' + str(k)
  Question_no.append(que)

f_weight =[]
weight_prob = []
for i in range(0,y_test,1):
  if predictions[i,0] > predictions[i,1] and predictions[i,0] > predictions[i,2]:
    f_weight.append('Easy')
    weight_prob.append(predictions[i,0])
  elif predictions[i,1] > predictions[i,2]:
    f_weight.append('Medium')
    weight_prob.append(predictions[i,1])
  else:
    f_weight.append('Hard')
    weight_prob.append(predictions[i,2])

import pandas as pd
from pandas import ExcelWriter
import xlsxwriter
df = pd.DataFrame()
# column1
df['Question_no'] = Question_no
# column2
df['Probability Weights'] = weight_prob
# column3
df['Difficulty Level'] = f_weight
writer = pd.ExcelWriter('result.xlsx', engine='xlsxwriter')
df.to_excel(writer, sheet_name='Weights for CAT Module',index=False)
writer.save()

from openpyxl.reader.excel import load_workbook
wb = load_workbook('result.xlsx')
sheet = wb.get_sheet_by_name('Weights for CAT Module')
row_count = sheet.max_row -1
column_count = sheet.max_column
i = 1
while (i <= row_count):
 for item in sheet.iter_cols():
    #for row in sheet.iter_cols():
    first_value = item[i]
    print (first_value.value)
 i+=1